
(defun partitionList (lst list1 list2) ;partitions the list into two nearly equal halves
  (cond
    ((null lst) (values (reverse list1) (reverse list2)))  ;if list is empty returns reversed lists
    ((null (cdr lst)) (values (reverse (cons (car lst) list1)) (reverse list2))) ;if one element return reversed lists
    (t (partitionList (cddr lst) (cons (car lst) list1) (cons (cadr lst) list2))))) ;recursively form list halves

(defun mergeLists (lst1 lst2) ;merges the two sorted lists
  (cond
    ((null lst1) lst2)  ;if lst1 is empty return lst2
    ((null lst2) lst1)  ;if lst2 is empty return lst1
    ((<= (car lst1) (car lst2))  ;compare first elements
     (cons (car lst1) (mergeLists (cdr lst1) lst2))) ;first element of lst1 is added to result then call to rest of lst2
    (t
     (cons (car lst2) (mergeLists lst1 (cdr lst2)))))) ;second element of lst2 is added to result then call to rest of lst2

(defun mergesort (lst) ;main function
  (cond
    ((or (null lst) (null (cdr lst))) lst)  ;sorted if zero or one element
    (t (multiple-value-bind (first-half second-half) (partitionList lst '() '()) ;returns first and second half of list
         (mergeLists (mergesort first-half) (mergesort second-half)))))) ;recurses, returning sorted list